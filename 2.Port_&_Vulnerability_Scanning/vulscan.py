#!/usr/bin/python

import os, sys, re, socket

def retBanner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        s = socket.socket()
        s.connect((ip,port))
        banner = s.recv(1024)
        s.close()
        if banner: 
            banner = limpiar_banner(banner)
        return banner

    except:
        return None

def limpiar_banner(banner):
    try:
        # Intentar decodificar el banner a utf-8
        banner_str = banner.decode('utf-8')
    except UnicodeDecodeError:
        # Si falla la decodificación, convertir cada byte a su representación hexadecimal
        banner_str = ''.join(f'\\x{byte:02x}' for byte in banner)
    
    # Eliminar los caracteres de salto de línea
    banner_str = re.sub(r'\\r|\\n', '', banner_str)
    
    return banner_str

def checkVulns(banner, filename, ip, port):
    f = open(filename, "r")
    for line in f.readlines():
        if line.strip("\n") in banner:
            print(f"[!!!] Server is vulnerable in {ip} at {port}: vulnerability: {banner}")


def main():
    if len(sys.argv) == 2:
        filename = sys.argv[1]
        if not os.path.isfile(filename):
            print("[-] File Doesnt exist!")
            exit(0)
        if not os.access(filename, os.R_OK):
            print("[-] Access denied!")
            exit(0)
    
    else:
        print(f"[-] The usage {str(sys.argv[0])} <vuln filename>")
        exit(0)


    for x in range(2,5):
        ip = "192.168.2." + str(x)
        portlist = [21,22,23,25,80,110,443,445]
        for port in portlist:
            banner = retBanner(ip, port)
            if banner: 
                print("[+]", ip, "port", port, ":", banner)
                checkVulns(banner, filename, ip, port)


main()

